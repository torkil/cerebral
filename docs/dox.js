
window.data = {}
window.data.docs = {"cerebral":{"application":{"modules":[{"name":"core.js","dox":[{"tags":[{"type":"exports","string":"core"},{"type":"requires","string":"[underscore]"}],"description":{"full":"The core module, responsible for mediating between modules using the publish-subscribe pattern.\n  This should not be directly exposed to the submodules of the application, rather expose methods like publish and\n  subscribe through a facade. Google facade pattern.\n  @exports core\n  @requires [underscore]","summary":"The core module, responsible for mediating between modules using the publish-subscribe pattern.\n  This should not be directly exposed to the submodules of the application, rather expose methods like publish and\n  subscribe through a facade. Google facade pattern.\n  @exports core\n  @requires [underscore]","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/application/core\",[\n  \"underscore\",\n  \"cerebral/application/sandboxfactory\"\n], \nfunction( _, sandboxfactory ){\n  \n  var core, channels\n\n  core = {"},{"tags":[{"type":"type","types":["Object"]}],"description":{"full":"The api object of the core. Used for describing what could be exposed through facades and delegation. \n      Only an abstraction and holds no real protection value.\n      @type Object","summary":"The api object of the core. Used for describing what could be exposed through facades and delegation. \n      Only an abstraction and holds no real protection value.\n      @type Object","body":""},"isPrivate":false,"ignore":false,"code":"api: {"},{"tags":[{"type":"type","types":["Object"]}],"description":{"full":"Public api for all modules to use.\n        @type Object","summary":"Public api for all modules to use.\n        @type Object","body":""},"isPrivate":false,"ignore":false,"code":"public: {}\n    }\n  }"},{"tags":[{"type":"private","string":""},{"type":"type","types":["Object"]}],"description":{"full":"Holds the callback listeners bound to fire when published to that specific channel.\n    @private\n    @type Object","summary":"Holds the callback listeners bound to fire when published to that specific channel.\n    @private\n    @type Object","body":""},"isPrivate":false,"ignore":false,"code":"channels = {}"},{"tags":[{"type":"public","string":""},{"type":"type","types":["Object"]}],"description":{"full":"The configuration of the core.\n    @public\n    @type Object","summary":"The configuration of the core.\n    @public\n    @type Object","body":""},"isPrivate":false,"ignore":false,"code":"core.configuration = {\n    moduleRoot: '/'\n  }","ctx":{"type":"property","receiver":"core","name":"configuration","value":"{","string":"core.configuration"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object"],"name":"configuration","description":"The configuration object to extend the cores configuration with"},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Configure the core,\n    @public\n    @type Function\n    @param {Object} configuration The configuration object to extend the cores configuration with\n    @returns {cerebral/core} core","summary":"Configure the core,\n    @public\n    @type Function\n    @param {Object} configuration The configuration object to extend the cores configuration with\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.configure = function( configuration ) {\n    _.extend( this.configuration, configuration )\n    return core\n  }","ctx":{"type":"method","receiver":"core","name":"configure","string":"core.configure()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"see","local":"core.publish","visibility":"core.publish"}],"description":{"full":"@public\n    @type Function\n    @see core.publish","summary":"@public\n    @type Function\n    @see core.publish","body":""},"isPrivate":false,"ignore":false,"code":"core.api.public.publish = function() {\n    core.publish.apply( core, arguments )\n    return core.api.public\n  }"},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"see","local":"core.subscribe","visibility":"core.subscribe"}],"description":{"full":"@public\n    @type Function\n    @see core.subscribe","summary":"@public\n    @type Function\n    @see core.subscribe","body":""},"isPrivate":false,"ignore":false,"code":"core.api.public.subscribe = function() {\n    core.subscribe.apply( core, arguments )\n    return core.api.public\n  }"},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"see","local":"core.unsubscribe","visibility":"core.unsubscribe"}],"description":{"full":"@public\n    @type Function\n    @see core.unsubscribe","summary":"@public\n    @type Function\n    @see core.unsubscribe","body":""},"isPrivate":false,"ignore":false,"code":"core.api.public.unsubscribe = function() {\n    core.unsubscribe.apply( core, arguments )\n    return core.api.public\n  }"},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"channel","description":"The name of the channel to bind the callback to"},{"type":"param","types":["Function"],"name":"callback","description":"The callback to fire"},{"type":"param","types":["Object"],"name":"context","description":"The context of the callback. The callback will have this paramter as its this value"},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Binds a callback to be called when published to the channel given.\n    @public\n    @type Function\n    @param {String} channel The name of the channel to bind the callback to\n    @param {Function} callback The callback to fire\n    @param {Object} context The context of the callback. The callback will have this paramter as its this value\n    @returns {cerebral/core} core","summary":"Binds a callback to be called when published to the channel given.\n    @public\n    @type Function\n    @param {String} channel The name of the channel to bind the callback to\n    @param {Function} callback The callback to fire\n    @param {Object} context The context of the callback. The callback will have this paramter as its this value\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.subscribe = function( channel, callback, context ) {\n    if( typeof channel !== 'string' ) {\n      throw new TypeError( 'channel must be string' ) \n    }\n    if( typeof callback !== 'function' ) {\n      throw new TypeError( 'callback must be function' ) \n    }\n\n    if( !channels[channel] ) {\n      channels[ channel ] = [] \n    }\n\n    channels[ channel ].push({\n      callback: callback,\n      context: context || {}\n    })\n\n    return core\n  }","ctx":{"type":"method","receiver":"core","name":"subscribe","string":"core.subscribe()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"channel","description":"The name of the channel to unbind the callback from"},{"type":"param","types":["Function"],"name":"callback","description":"The callback to unbind"},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Unbind the callback from firing when published to the given channel.\n    @public\n    @type Function\n    @param {String} channel The name of the channel to unbind the callback from\n    @param {Function} callback The callback to unbind\n    @returns {cerebral/core} core","summary":"Unbind the callback from firing when published to the given channel.\n    @public\n    @type Function\n    @param {String} channel The name of the channel to unbind the callback from\n    @param {Function} callback The callback to unbind\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.unsubscribe = function( channel, callback ) {\n    var listeners, index, listener\n\n    if( typeof channel !== 'string' ) {\n      throw new TypeError( 'channel must be string' ) \n    }\n\n    listeners = channels[ channel ]\n    if( !listeners || !listeners.length ) {\n      return null\n    }\n\n    for( index = 0; index < listeners.length; index++ ) {\n      listener = listeners[ index ] \n      if( listener.callback === callback ) {\n        listeners.splice( index, 1 )\n      }\n    }\n\n    return core\n  }","ctx":{"type":"method","receiver":"core","name":"unsubscribe","string":"core.unsubscribe()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"channel","description":"The name of the channel to unbind the callback from"},{"type":"param","types":["Mixed[]"],"name":"args","description":"The arguments after channel to be passed to callback"},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Publish to a channel, passing the arguments after channel to the callback.\n    @public\n    @type Function\n    @param {String} channel The name of the channel to unbind the callback from\n    @param {Mixed[]} args The arguments after channel to be passed to callback\n    @returns {cerebral/core} core","summary":"Publish to a channel, passing the arguments after channel to the callback.\n    @public\n    @type Function\n    @param {String} channel The name of the channel to unbind the callback from\n    @param {Mixed[]} args The arguments after channel to be passed to callback\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.publish = function( channel ) {\n    var listeners, args, index, listener\n\n    listeners = channels[ channel ]\n    if( !listeners || !listeners.length ) {\n      return null\n    }\n\n    args = [].splice.call( arguments, 1 )\n    for( index = 0; index < listeners.length; index++ ) {\n      listener = listeners[ index ]\n      listener.callback.apply( listener.context, args )\n    }\n\n    return core\n  }","ctx":{"type":"method","receiver":"core","name":"publish","string":"core.publish()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"modulename","description":"The name of the namespace/folder that contains the module"},{"type":"param","types":["Function"],"name":"callback","description":"The continuation to call when either an error os produced or the module is found."},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Require a module from the moduleRoot namespace, will automagicaly look for the main.js within the modulename folder.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @param {Function} callback The continuation to call when either an error os produced or the module is found.\n    @returns {cerebral/core} core","summary":"Require a module from the moduleRoot namespace, will automagicaly look for the main.js within the modulename folder.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @param {Function} callback The continuation to call when either an error os produced or the module is found.\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.loadModule = function( options, callback ) {\n    var modulename, moduleRoot, mainPath, sandbox, sandboxNamespace, requireConfig\n\n    modulename = options.modulename\n\n    moduleRoot = this.configuration.moduleRoot + modulename\n    mainPath = moduleRoot + '/main'\n\n    sandboxfactory.delegateCoreApi( core.api.public )\n\n    sandbox = sandboxfactory.create({\n      element: options.element\n    })\n\n    sandboxNamespace = moduleRoot + '/sandbox'\n\n    if( !require.defined(sandboxNamespace) ) {\n      define(\n        sandboxNamespace,[\n        ],\n        sandbox\n      )\n    }\n\n    requireConfig = { map: {} }\n\n    requireConfig.map[ moduleRoot ] = {\n      'sandbox': sandboxNamespace\n    }\n    \n    require(requireConfig, [ mainPath ], \n      function( main ) {\n        if( typeof main !== 'function' ) {\n          core.unloadModule( modulename )\n          callback( TypeError('Module returned value not of type function') )\n        } else {\n          callback( null, main )\n        }\n      },\n      function( error ) {\n        core.unloadModule( modulename )\n        callback( error )\n      })\n    return core\n  }","ctx":{"type":"method","receiver":"core","name":"loadModule","string":"core.loadModule()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"modulename","description":"The name of the namespace/folder that contains the module"},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Unload a module, undefining it in the amd loader and propegating down to all dependecies within the same module namespace.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @returns {cerebral/core} core","summary":"Unload a module, undefining it in the amd loader and propegating down to all dependecies within the same module namespace.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.unloadModule = function( modulename ) {\n    var definedModules, moduleRoot, sandboxNamespace, name\n\n    definedModules = require.s.contexts._.defined\n    moduleRoot = this.configuration.moduleRoot + modulename\n    sandboxNamespace = moduleRoot + '/sandbox'\n\n    if( require.defined(sandboxNamespace) ) {\n      require.undef( sandboxNamespace )\n    }\n\n    for( name in definedModules ) {\n      if( definedModules.hasOwnProperty(name) && name.indexOf(modulename) !== -1 ) {\n        require.undef( name )\n      }\n    }\n    return core\n  }","ctx":{"type":"method","receiver":"core","name":"unloadModule","string":"core.unloadModule()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"modulename","description":"The name of the namespace/folder that contains the module"},{"type":"returns","string":"Boolean"}],"description":{"full":"Check if a module is loaded and started\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @returns Boolean","summary":"Check if a module is loaded and started\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @returns Boolean","body":""},"isPrivate":false,"ignore":false,"code":"core.moduleIsStarted = function( modulename ) {\n    var moduleRoot, mainPath\n\n    moduleRoot = this.configuration.moduleRoot + modulename\n    mainPath = moduleRoot + '/main'\n\n    return require.defined( mainPath )\n  }","ctx":{"type":"method","receiver":"core","name":"moduleIsStarted","string":"core.moduleIsStarted()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"modulename","description":"The name of the namespace/folder that contains the module"},{"type":"param","types":["Object"],"name":"options","description":"Options for the module and sandbox"},{"type":"param","types":["options.element"],"name":"The","description":"element to restrict dom access to"},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Load and start a module by running the returned main function with a new sandbox object.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @param {Object} options Options for the module and sandbox\n    @param options.element The element to restrict dom access to\n    @returns {cerebral/core} core","summary":"Load and start a module by running the returned main function with a new sandbox object.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @param {Object} options Options for the module and sandbox\n    @param options.element The element to restrict dom access to\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.start = function( modulename, options ) {\n    if( core.moduleIsStarted(modulename) )\n      return core\n\n    core.loadModule({\n      modulename: modulename,\n      element: options.element\n    }, \n    function( err, main ) {\n      if( err ) {\n        throw err\n      }\n      try {\n        main()\n      } catch( e ) {\n        console.log( 'core.start: ' + modulename + ' threw exception: ', e)\n      }\n    })\n\n    return core\n  }","ctx":{"type":"method","receiver":"core","name":"start","string":"core.start()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"modulename","description":"The name of the namespace/folder that contains the module"},{"type":"returns","string":"{cerebral/core} core"}],"description":{"full":"Stops a running module.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @returns {cerebral/core} core","summary":"Stops a running module.\n    @public\n    @type Function\n    @param {String} modulename The name of the namespace/folder that contains the module\n    @returns {cerebral/core} core","body":""},"isPrivate":false,"ignore":false,"code":"core.stop = function( modulename ) {\n    if( !core.moduleIsStarted(modulename) )\n      return core\n\n    core.unloadModule( modulename )\n\n    return core\n  }\n\n  return core\n})","ctx":{"type":"method","receiver":"core","name":"stop","string":"core.stop()"}}]},{"name":"Router.js","dox":[{"tags":[{"type":"class","string":"The base router class"},{"type":"extends","string":"Backbone.Router"},{"type":"requires","string":"[underscore, cerebral/lib/Backbone, cerebral/mvc/ViewCollection]"},{"type":"exports","string":"Router"}],"description":{"full":"@class The base router class\n  @extends Backbone.Router\n  @requires [underscore, cerebral/lib/Backbone, cerebral/mvc/ViewCollection]\n  @exports Router","summary":"@class The base router class\n  @extends Backbone.Router\n  @requires [underscore, cerebral/lib/Backbone, cerebral/mvc/ViewCollection]\n  @exports Router","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/application/Router\", [\n  \"cerebral/lib/Backbone\",\n  \"cerebral/mvc/ViewCollection\"\n], \nfunction( Backbone, ViewCollection ){"},{"tags":[{"type":"public","string":""},{"type":"constructor","string":""},{"type":"property","string":"{Number} rid Unique number identifying the router instance"},{"type":"property","string":"{cerebral/mvc/ViewCollection} delegateViews ViewCollection containing delegateViews. Link clicks inside delegateWiews will trigger navigate"}],"description":{"full":"Creates a new Router\n    @public\n    @constructor\n    @property {Number} rid Unique number identifying the router instance\n    @property {cerebral/mvc/ViewCollection} delegateViews ViewCollection containing delegateViews. Link clicks inside delegateWiews will trigger navigate","summary":"Creates a new Router\n    @public\n    @constructor\n    @property {Number} rid Unique number identifying the router instance\n    @property {cerebral/mvc/ViewCollection} delegateViews ViewCollection containing delegateViews. Link clicks inside delegateWiews will trigger navigate","body":""},"isPrivate":false,"ignore":false,"code":"var Router = Backbone.Router.extend({\n    constructor: function() {\n      this.rid = Router.generateRouterId()\n      this.delegateViews = new ViewCollection()\n\n      _.extend( this, Router.defaults )\n\n      this.bindTo( this.delegateViews, \"attach\", this.onAttachedDelegateView, this )\n      this.bindTo( this.delegateViews, \"detach\", this.onDetachedDelegateView, this )\n\n      Backbone.Router.prototype.constructor.apply( this, arguments )\n    }\n  })","ctx":{"type":"declaration","name":"Router","value":"Backbone.Router.extend({","string":"Router"}},{"tags":[{"type":"public","string":""},{"type":"static","string":""},{"type":"type","types":["Object"]}],"description":{"full":"Default settings\n    @public\n    @static\n    @type Object","summary":"Default settings\n    @public\n    @static\n    @type Object","body":""},"isPrivate":false,"ignore":false,"code":"Router.defaults = {","ctx":{"type":"property","receiver":"Router","name":"defaults","value":"{","string":"Router.defaults"}},{"tags":[{"type":"type","types":["String"]},{"type":"default","string":"\"a\""}],"description":{"full":"Selector for the elements to register click events on\n      @type String\n      @default \"a\"","summary":"Selector for the elements to register click events on\n      @type String\n      @default \"a\"","body":""},"isPrivate":false,"ignore":false,"code":"linkSelector: \"a\","},{"tags":[{"type":"type","types":["String"]},{"type":"default","string":"\"click\""}],"description":{"full":"Event type to listen for\n      @type String\n      @default \"click\"","summary":"Event type to listen for\n      @type String\n      @default \"click\"","body":""},"isPrivate":false,"ignore":false,"code":"eventType: \"click\"\n  }"},{"tags":[{"type":"private","string":""},{"type":"type","types":["Number"]}],"description":{"full":"Internal incremented id to be assigned to new routers\n    @private\n    @type Number","summary":"Internal incremented id to be assigned to new routers\n    @private\n    @type Number","body":""},"isPrivate":false,"ignore":false,"code":"var rid = 0","ctx":{"type":"declaration","name":"rid","value":"0","string":"rid"}},{"tags":[{"type":"public","string":""},{"type":"static","string":""},{"type":"type","types":["Function"]},{"type":"returns","string":"Number"}],"description":{"full":"Returnes a unique number to be used as object id for new routers\n    @public\n    @static\n    @type Function\n    @returns Number","summary":"Returnes a unique number to be used as object id for new routers\n    @public\n    @static\n    @type Function\n    @returns Number","body":""},"isPrivate":false,"ignore":false,"code":"Router.generateRouterId = function() {\n    rid = rid + 1\n    return rid\n  }","ctx":{"type":"method","receiver":"Router","name":"generateRouterId","string":"Router.generateRouterId()"}},{"tags":[{"type":"public","string":""},{"type":"static","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object","window.location"],"name":"location","description":"The location object to check"},{"type":"param","types":["String"],"name":"location.protocol","description":""},{"type":"param","types":["Number"],"name":"location.port","description":""},{"type":"param","types":["String"],"name":"location.hostname","description":""},{"type":"param","types":["String"],"name":"test","description":"The url to check"},{"type":"returns","string":"Boolean"}],"description":{"full":"Checks a location object against a test url it follows the same-origin policy\n    @public\n    @static\n    @type Function\n    @param {Object|window.location} location The location object to check\n    @param {String} location.protocol\n    @param {Number} location.port\n    @param {String} location.hostname\n    @param {String} test The url to check\n    @returns Boolean","summary":"Checks a location object against a test url it follows the same-origin policy\n    @public\n    @static\n    @type Function\n    @param {Object|window.location} location The location object to check\n    @param {String} location.protocol\n    @param {Number} location.port\n    @param {String} location.hostname\n    @param {String} test The url to check\n    @returns Boolean","body":""},"isPrivate":false,"ignore":false,"code":"Router.sameOrigin = function( location, test ) {\n    var port, origin\n\n    port = location.port && location.port != '80' ? ':' + location.port : ''\n    origin = location.protocol + '//' + location.hostname + port\n\n    return test.match( origin ) ? true : false\n  }","ctx":{"type":"method","receiver":"Router","name":"sameOrigin","string":"Router.sameOrigin()"}},{"tags":[{"type":"public","string":""},{"type":"param","types":["Object"],"name":"event","description":"The click event"},{"type":"type","types":["Function"]}],"description":{"full":"Takes a click event from a link. If its the same origin as the current url it lets it pass \n    else it prevents default and calls navigate\n    @public\n    @param {Object} event The click event\n    @type Function","summary":"Takes a click event from a link. If its the same origin as the current url it lets it pass \n    else it prevents default and calls navigate\n    @public\n    @param {Object} event The click event\n    @type Function","body":""},"isPrivate":false,"ignore":false,"code":"Router.prototype.clickListener = function( event ) {\n    var url, path\n\n    url = event.currentTarget.href\n    if( !Router.sameOrigin(window.location, url) )\n      return null\n\n    event.preventDefault()\n    \n    path = event.currentTarget.pathname + event.currentTarget.search \n    this.navigate(path, {trigger: true})\n  }","ctx":{"type":"method","constructor":"Router","name":"clickListener","string":"Router.prototype.clickListener()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"event","string":"delegateViews#attach"},{"type":"param","types":["String"],"name":"name","description":""},{"type":"param","types":["Backbone.View","cerebral","mvc","view"],"name":"viewDelegate","description":""}],"description":{"full":"Sets up the clickListener for all links inside the viewDelegate\n    @public\n    @type Function\n    @event delegateViews#attach\n    @param {String} name\n    @param {Backbone.View|cerebral/mvc/view} viewDelegate","summary":"Sets up the clickListener for all links inside the viewDelegate\n    @public\n    @type Function\n    @event delegateViews#attach\n    @param {String} name\n    @param {Backbone.View|cerebral/mvc/view} viewDelegate","body":""},"isPrivate":false,"ignore":false,"code":"Router.prototype.onAttachedDelegateView = function( name, viewDelegate ) {\n    viewDelegate.$el.delegate( this.linkSelector, this.generateClickEventName(), _.bind(this.clickListener, this) )\n    viewDelegate.on( \"setelement\", this.onDelegateViewSetElement, this )\n  }","ctx":{"type":"method","constructor":"Router","name":"onAttachedDelegateView","string":"Router.prototype.onAttachedDelegateView()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"event","string":"delegateViews#detach"},{"type":"param","types":["String"],"name":"name","description":""},{"type":"param","types":["Backbone.View","cerebral","mvc","view"],"name":"viewDelegate","description":""}],"description":{"full":"Unbinds the clickListener from all links inside the view\n    @public\n    @type Function\n    @event delegateViews#detach\n    @param {String} name\n    @param {Backbone.View|cerebral/mvc/view} viewDelegate","summary":"Unbinds the clickListener from all links inside the view\n    @public\n    @type Function\n    @event delegateViews#detach\n    @param {String} name\n    @param {Backbone.View|cerebral/mvc/view} viewDelegate","body":""},"isPrivate":false,"ignore":false,"code":"Router.prototype.onDetachedDelegateView = function( name, viewDelegate ) {\n    viewDelegate.$el.undelegate( this.linkSelector, this.generateClickEventName() )\n    viewDelegate.off( \"setelement\", this.onDelegateViewSetElement, this )\n  }","ctx":{"type":"method","constructor":"Router","name":"onDetachedDelegateView","string":"Router.prototype.onDetachedDelegateView()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"event","string":"delegateViews#setelement"},{"type":"param","types":["Backbone.View","cerebral","mvc","view"],"name":"viewDelegate","description":""}],"description":{"full":"Rebinds the clickListener to all the links inside the viewDelegate on viewDelegate.setElement\n    @public\n    @type Function\n    @event delegateViews#setelement\n    @param {Backbone.View|cerebral/mvc/view} viewDelegate","summary":"Rebinds the clickListener to all the links inside the viewDelegate on viewDelegate.setElement\n    @public\n    @type Function\n    @event delegateViews#setelement\n    @param {Backbone.View|cerebral/mvc/view} viewDelegate","body":""},"isPrivate":false,"ignore":false,"code":"Router.prototype.onDelegateViewSetElement = function( viewDelegate ) {\n    viewDelegate.$el.delegate( this.linkSelector, this.generateClickEventName(), _.bind(this.clickListener, this) )\n  }","ctx":{"type":"method","constructor":"Router","name":"onDelegateViewSetElement","string":"Router.prototype.onDelegateViewSetElement()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"returns","string":"String"}],"description":{"full":"Generates a namespaced click listener string for binding and unbinding click events to delegateViews\n    @public\n    @type Function\n    @returns String","summary":"Generates a namespaced click listener string for binding and unbinding click events to delegateViews\n    @public\n    @type Function\n    @returns String","body":""},"isPrivate":false,"ignore":false,"code":"Router.prototype.generateClickEventName = function() {\n    return this.eventType + \".router#\" + this.rid\n  }\n\n  return Router\n})","ctx":{"type":"method","constructor":"Router","name":"generateClickEventName","string":"Router.prototype.generateClickEventName()"}}]},{"name":"sandboxfactory.js","dox":[{"tags":[{"type":"exports","string":"sandboxfactory"},{"type":"requires","string":"[underscore, jquery]"}],"description":{"full":"Sandboxfactory. Responsible for creating new sanbox objects made available to application modules through the amd module loader.\n  @exports sandboxfactory\n  @requires [underscore, jquery]","summary":"Sandboxfactory. Responsible for creating new sanbox objects made available to application modules through the amd module loader.\n  @exports sandboxfactory\n  @requires [underscore, jquery]","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/application/sandboxfactory\",[\n  \"underscore\",\n  \"jquery\"\n], \nfunction( underscore, $ ){\n  \n  var sandboxfactory, properties\n\n\n  sandboxfactory = {}"},{"tags":[{"type":"private","string":""},{"type":"type","types":["Object"]}],"description":{"full":"The properties to attach to the created sandbox objects prototype.\n    @private\n    @type Object","summary":"The properties to attach to the created sandbox objects prototype.\n    @private\n    @type Object","body":""},"isPrivate":false,"ignore":false,"code":"properties = {"},{"tags":[{"type":"type","types":["Function"]}],"description":{"full":"Scoped DOM manipulation function, proxy for jquery/zepto/ender/etc.. Only has acces to elements within\n      its own element\n      @type Function","summary":"Scoped DOM manipulation function, proxy for jquery/zepto/ender/etc.. Only has acces to elements within\n      its own element\n      @type Function","body":""},"isPrivate":false,"ignore":false,"code":"$: function( selector ) {\n      return $( selector, this.element )\n    },"},{"tags":[{"type":"type","types":["Function","jQueryObject"]},{"type":"default","string":"\"#sandbox\""}],"description":{"full":"The element the sandbox has access to.\n      @type Function|jQueryObject\n      @default \"#sandbox\"","summary":"The element the sandbox has access to.\n      @type Function|jQueryObject\n      @default \"#sandbox\"","body":""},"isPrivate":false,"ignore":false,"code":"element: '#sandbox'\n  }"},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"name","description":"The name of the property"},{"type":"param","types":["Mixed"],"name":"value","description":"The value of the property"},{"type":"returns","string":"{cerebral/application/sandboxfactory} self"}],"description":{"full":"Set a property in the properties object.\n    @public\n    @type Function\n    @param {String} name The name of the property\n    @param {Mixed} value The value of the property\n    @returns {cerebral/application/sandboxfactory} self","summary":"Set a property in the properties object.\n    @public\n    @type Function\n    @param {String} name The name of the property\n    @param {Mixed} value The value of the property\n    @returns {cerebral/application/sandboxfactory} self","body":""},"isPrivate":false,"ignore":false,"code":"sandboxfactory.defineProperty = function( name, value ) {\n    if( typeof name !== 'string' ) {\n      throw new TypeError( 'Name of property must be name' )\n    }\n\n    properties[ name ] = value\n    return this\n  }","ctx":{"type":"method","receiver":"sandboxfactory","name":"defineProperty","string":"sandboxfactory.defineProperty()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"name","description":"The name of the property to remove"},{"type":"returns","string":"{cerebral/application/sandboxfactory} self"}],"description":{"full":"Delete a property from the properties object.\n    @public\n    @type Function\n    @param {String} name The name of the property to remove\n    @returns {cerebral/application/sandboxfactory} self","summary":"Delete a property from the properties object.\n    @public\n    @type Function\n    @param {String} name The name of the property to remove\n    @returns {cerebral/application/sandboxfactory} self","body":""},"isPrivate":false,"ignore":false,"code":"sandboxfactory.removeProperty = function( name ) {\n    delete properties[ name ]\n    return this\n  }","ctx":{"type":"method","receiver":"sandboxfactory","name":"removeProperty","string":"sandboxfactory.removeProperty()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["cerebral","application","core.api"],"name":"coreapi","description":"The application core api"},{"type":"returns","string":"{cerebral/application/sandboxfactory} self"}],"description":{"full":"Delegate the core public api to the factory so we can facade core methods for publishing and subscribing as sandbox properties.\n    @public\n    @type Function\n    @param {cerebral/application/core.api} coreapi The application core api\n    @returns {cerebral/application/sandboxfactory} self","summary":"Delegate the core public api to the factory so we can facade core methods for publishing and subscribing as sandbox properties.\n    @public\n    @type Function\n    @param {cerebral/application/core.api} coreapi The application core api\n    @returns {cerebral/application/sandboxfactory} self","body":""},"isPrivate":false,"ignore":false,"code":"sandboxfactory.delegateCoreApi = function( coreapi ) {\n    if( typeof coreapi !== 'object' ) {\n      throw new TypeError( 'No api delegated' )\n    }\n\n    _.forEach(coreapi, function( propertyvalue, propertyname ) {\n      \n      sandboxfactory.defineProperty(propertyname, function() {\n        coreapi[ propertyname ].apply( {}, arguments )\n      })\n    })\n\n    return this\n  }","ctx":{"type":"method","receiver":"sandboxfactory","name":"delegateCoreApi","string":"sandboxfactory.delegateCoreApi()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["cerebral","application","core"],"name":"core","description":"The application core"},{"type":"param","types":["Options"],"name":"options","description":"The options for the sandbox"},{"type":"param","types":["options.element"],"name":"The","description":"DOM element the sandbox has access to"},{"type":"returns","string":"{Object} sandbox"}],"description":{"full":"Create a new sandbox object with the properties on the properties object attached to its prototype\n    @public\n    @type Function\n    @param {cerebral/application/core} core The application core\n    @param {Options} options The options for the sandbox\n    @param options.element The DOM element the sandbox has access to\n    @returns {Object} sandbox","summary":"Create a new sandbox object with the properties on the properties object attached to its prototype\n    @public\n    @type Function\n    @param {cerebral/application/core} core The application core\n    @param {Options} options The options for the sandbox\n    @param options.element The DOM element the sandbox has access to\n    @returns {Object} sandbox","body":""},"isPrivate":false,"ignore":false,"code":"sandboxfactory.create = function(options ) {\n    var proto, sandbox, element\n\n    proto = _.clone( properties )\n\n    sandbox = Object.create( proto )\n\n    element = options.element\n    if( element ) {\n      sandbox.element = $( options.element )\n    }\n\n    return sandbox\n  }\n\n  return sandboxfactory\n})","ctx":{"type":"method","receiver":"sandboxfactory","name":"create","string":"sandboxfactory.create()"}}]}]},"ext":{"Backbone":{"modules":[{"name":"Events.js","dox":[{"tags":[{"type":"exports","string":"Events"}],"description":{"full":"Mixin for extending Backbone.Events and Backbone.Model|Collection|View|Router.prototype\n  @exports Events","summary":"Mixin for extending Backbone.Events and Backbone.Model|Collection|View|Router.prototype\n  @exports Events","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/ext/Backbone/Events\", [\n],\nfunction() {\n  \n  var Events\n\n  Events = {}\n\n  Events.bindings = []"},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]}],"description":{"full":"Alias trigger as emit\n    @public\n    @type Function","summary":"Alias trigger as emit\n    @public\n    @type Function","body":""},"isPrivate":false,"ignore":false,"code":"Events.emit = function() {\n    this.trigger.apply( this, arguments )\n  }","ctx":{"type":"method","receiver":"Events","name":"emit","string":"Events.emit()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]}],"description":{"full":"Alias on as addEventListener\n    @public\n    @type Function","summary":"Alias on as addEventListener\n    @public\n    @type Function","body":""},"isPrivate":false,"ignore":false,"code":"Events.addEventListener = function() {\n    this.on.apply( this, arguments )\n  }","ctx":{"type":"method","receiver":"Events","name":"addEventListener","string":"Events.addEventListener()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]}],"description":{"full":"Alias off as removeEventListener\n    @public\n    @type Function","summary":"Alias off as removeEventListener\n    @public\n    @type Function","body":""},"isPrivate":false,"ignore":false,"code":"Events.removeEventListener = function() {\n    this.off.apply( this, arguments )\n  }","ctx":{"type":"method","receiver":"Events","name":"removeEventListener","string":"Events.removeEventListener()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"event","description":"The event to bind to"},{"type":"param","types":["Function"],"name":"callback","description":"The callback to bind"},{"type":"param","types":["Object"],"name":"context","description":"The context, this value of the callback"}],"description":{"full":"Register a event handler and unbind it on the first time it fires\n    @private\n    @type Function\n    @param {String} event The event to bind to\n    @param {Function} callback The callback to bind\n    @param {Object} context The context, this value of the callback","summary":"Register a event handler and unbind it on the first time it fires\n    @private\n    @type Function\n    @param {String} event The event to bind to\n    @param {Function} callback The callback to bind\n    @param {Object} context The context, this value of the callback","body":""},"isPrivate":false,"ignore":false,"code":"Events.once = function( event, callback, context ) {\n    var fn\n    fn = _.bind(function() {\n      callback.apply( context || this, arguments )\n      this.off( event, fn )\n    }, this)\n    this.on( event, fn )\n  }","ctx":{"type":"method","receiver":"Events","name":"once","string":"Events.once()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object"],"name":"obj","description":"The object to unbind from"},{"type":"param","types":["String"],"name":"[event]","description":"The event to unbind events from"},{"type":"param","types":["Function"],"name":"[callback]","description":"The callback to unbind"}],"description":{"full":"Unbinds listeners, delegates to the the appropriate private method based on parameters\n    @public\n    @type Function\n    @param {Object} obj The object to unbind from\n    @param {String} [event] The event to unbind events from\n    @param {Function} [callback] The callback to unbind","summary":"Unbinds listeners, delegates to the the appropriate private method based on parameters\n    @public\n    @type Function\n    @param {Object} obj The object to unbind from\n    @param {String} [event] The event to unbind events from\n    @param {Function} [callback] The callback to unbind","body":""},"isPrivate":false,"ignore":false,"code":"Events.unbindFrom = function( obj, event, callback ) {\n    if( arguments.length === 3 )\n      this.bindings = unbindSpecificCallback.apply( this, arguments )\n    if( arguments.length === 2 )\n      this.bindings = unbindSpecificEvent.apply( this, arguments )\n    if( arguments.length === 1 )\n      this.bindings = unbindAllOnObject.apply( this, arguments )\n    return this\n  }","ctx":{"type":"method","receiver":"Events","name":"unbindFrom","string":"Events.unbindFrom()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]}],"description":{"full":"Unbinds all listeners\n    @public\n    @type Function","summary":"Unbinds all listeners\n    @public\n    @type Function","body":""},"isPrivate":false,"ignore":false,"code":"Events.unbindAll = function() {\n    _.each(this.bindings, function( binding ) {\n      binding.obj.unbind( binding.event, binding.callback )\n    })\n    this.bindings = []\n    return this\n  }","ctx":{"type":"method","receiver":"Events","name":"unbindAll","string":"Events.unbindAll()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object"],"name":"obj","description":"The object to unbind from"},{"type":"returns","string":"{Array} bindings The bindings that didnt match the test"}],"description":{"full":"Unbinds all callbacks to all avents on a specific obj\n    @private\n    @type Function\n    @param {Object} obj The object to unbind from\n    @returns {Array} bindings The bindings that didnt match the test","summary":"Unbinds all callbacks to all avents on a specific obj\n    @private\n    @type Function\n    @param {Object} obj The object to unbind from\n    @returns {Array} bindings The bindings that didnt match the test","body":""},"isPrivate":false,"ignore":false,"code":"function unbindAllOnObject( obj ) {\n    return _.filter(this.bindings, function( binding, index ) {\n      if( binding.obj === obj ) {\n        binding.obj.unbind( binding.event, binding.callback )\n      } else {\n        return true\n      }\n    }, this)\n  }","ctx":{"type":"function","name":"unbindAllOnObject","string":"unbindAllOnObject()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object"],"name":"obj","description":"The object to unbind from"},{"type":"param","types":["String"],"name":"event","description":"The event to unbind events from"},{"type":"returns","string":"{Array} bindings The bindings that didnt match the test"}],"description":{"full":"Unbinds all callbacks to a specific event on a specific object\n    @private\n    @type Function\n    @param {Object} obj The object to unbind from\n    @param {String} event The event to unbind events from\n    @returns {Array} bindings The bindings that didnt match the test","summary":"Unbinds all callbacks to a specific event on a specific object\n    @private\n    @type Function\n    @param {Object} obj The object to unbind from\n    @param {String} event The event to unbind events from\n    @returns {Array} bindings The bindings that didnt match the test","body":""},"isPrivate":false,"ignore":false,"code":"function unbindSpecificEvent( obj, event ) {\n    return _.filter(this.bindings, function( binding, index ) {\n      if( binding.obj === obj && binding.event === event ) {\n        binding.obj.unbind( binding.event, binding.callback )\n      } else {\n        return true\n      }\n    }, this) \n  }","ctx":{"type":"function","name":"unbindSpecificEvent","string":"unbindSpecificEvent()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object"],"name":"obj","description":"The object to unbind from"},{"type":"param","types":["String"],"name":"event","description":"The event to unbind events from"},{"type":"param","types":["Function"],"name":"callback","description":"The callback to unbind"},{"type":"returns","string":"{Array} bindings The bindings that didnt match the test"}],"description":{"full":"Unbinds a specific callback to a specific event on a specific object\n    @private\n    @type Function\n    @param {Object} obj The object to unbind from\n    @param {String} event The event to unbind events from\n    @param {Function} callback The callback to unbind\n    @returns {Array} bindings The bindings that didnt match the test","summary":"Unbinds a specific callback to a specific event on a specific object\n    @private\n    @type Function\n    @param {Object} obj The object to unbind from\n    @param {String} event The event to unbind events from\n    @param {Function} callback The callback to unbind\n    @returns {Array} bindings The bindings that didnt match the test","body":""},"isPrivate":false,"ignore":false,"code":"function unbindSpecificCallback( obj, event, callback ) {\n    return _.filter(this.bindings, function( binding, index ) {\n      if( binding.obj === obj && binding.event === event && binding.callback === callback ) {\n        binding.obj.unbind( binding.event, binding.callback )\n      } else {\n        return true\n      }\n    }, this)\n  }","ctx":{"type":"function","name":"unbindSpecificCallback","string":"unbindSpecificCallback()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object"],"name":"obj","description":"The object to bind to"},{"type":"param","types":["String"],"name":"event","description":"The event to listen to"},{"type":"param","types":["Function"],"name":"callback","description":"The callback to fire when the event emits on the object"},{"type":"returns","string":"{cerebral/mvc/View} self"}],"description":{"full":"Binds a callback to be called when the given event fires on the given object\n    @public\n    @type Function\n    @param {Object} obj The object to bind to\n    @param {String} event The event to listen to\n    @param {Function} callback The callback to fire when the event emits on the object\n    @returns {cerebral/mvc/View} self","summary":"Binds a callback to be called when the given event fires on the given object\n    @public\n    @type Function\n    @param {Object} obj The object to bind to\n    @param {String} event The event to listen to\n    @param {Function} callback The callback to fire when the event emits on the object\n    @returns {cerebral/mvc/View} self","body":""},"isPrivate":false,"ignore":false,"code":"Events.bindTo = function( obj, event, callback, context ) {\n    obj.bind( event, callback, context || this )\n    this.bindings.push({\n      obj: obj,\n      event: event,\n      callback: callback\n    })\n    return this\n  }\n\n  return Events\n})","ctx":{"type":"method","receiver":"Events","name":"bindTo","string":"Events.bindTo()"}}]}]}},"lib":{"modules":[{"name":"Backbone.js","dox":[{"tags":[{"type":"augments","otherClass":"Backbone"},{"type":"requires","string":"[underscore, cerebral/vendor/Backbone, cerebral/ext/Backbone/Events]"},{"type":"exports","string":"Backbone"}],"description":{"full":"Extending Backbone\n  @augments Backbone\n  @requires [underscore, cerebral/vendor/Backbone, cerebral/ext/Backbone/Events]\n  @exports Backbone","summary":"Extending Backbone\n  @augments Backbone\n  @requires [underscore, cerebral/vendor/Backbone, cerebral/ext/Backbone/Events]\n  @exports Backbone","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/lib/Backbone\",[\n  \"underscore\",\n  \"backbone\",\n  \"cerebral/ext/Backbone/Events\"\n], function( _, Backbone, EventsExt ){"},{"tags":[],"description":{"full":"Extend the Backbone.Events object with the Events extension","summary":"Extend the Backbone.Events object with the Events extension","body":""},"ignore":false,"code":"_.extend( Backbone.Events, EventsExt )"},{"tags":[],"description":{"full":"Because Backbone.Events isnt the direct prototype object of Backbone.Model|Collection|View|Router\n    we have to extend their prototypes directly with the Events extension","summary":"Because Backbone.Events isnt the direct prototype object of Backbone.Model|Collection|View|Router\n    we have to extend their prototypes directly with the Events extension","body":""},"ignore":false,"code":"_.extend( Backbone.Model.prototype, EventsExt )\n  _.extend( Backbone.Collection.prototype, EventsExt )\n  _.extend( Backbone.View.prototype, EventsExt )\n  _.extend( Backbone.Router.prototype, EventsExt )\n\n  return Backbone\n})"}]}]},"mvc":{"modules":[{"name":"Collection.js","dox":[{"tags":[{"type":"class","string":"Base Collection class, for collections of models"},{"type":"extends","string":"Backbone.Collection"},{"type":"requires","string":"[Backbone]"},{"type":"exports","string":"Collection"}],"description":{"full":"@class Base Collection class, for collections of models\n  @extends Backbone.Collection\n  @requires [Backbone]\n  @exports Collection","summary":"@class Base Collection class, for collections of models\n  @extends Backbone.Collection\n  @requires [Backbone]\n  @exports Collection","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/mvc/Collection\", [\n  \"cerebral/lib/Backbone\"\n],\nfunction( Backbone ) {"},{"tags":[{"type":"public","string":""},{"type":"constructor","string":""}],"description":{"full":"Creates a new Collection\n    @public\n    @constructor","summary":"Creates a new Collection\n    @public\n    @constructor","body":""},"isPrivate":false,"ignore":false,"code":"var Collection = Backbone.Collection.extend({})\n\n  return Collection\n})","ctx":{"type":"declaration","name":"Collection","value":"Backbone.Collection.extend({})","string":"Collection"}}]},{"name":"Model.js","dox":[{"tags":[{"type":"class","string":"Base Model class, for data models"},{"type":"extends","string":"Backbone.Model"},{"type":"requires","string":"[cerebral/lib/Backbone]"},{"type":"exports","string":"Model"}],"description":{"full":"@class Base Model class, for data models\n  @extends Backbone.Model\n  @requires [cerebral/lib/Backbone]\n  @exports Model","summary":"@class Base Model class, for data models\n  @extends Backbone.Model\n  @requires [cerebral/lib/Backbone]\n  @exports Model","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/mvc/Model\", [\n  \"underscore\",\n  \"cerebral/lib/Backbone\"\n],\nfunction( _, Backbone ) {"},{"tags":[{"type":"public","string":""},{"type":"constructor","string":""}],"description":{"full":"Creates a new Model\n    @public\n    @constructor","summary":"Creates a new Model\n    @public\n    @constructor","body":""},"isPrivate":false,"ignore":false,"code":"var Model = Backbone.Model.extend({\n    constructor: function() {\n      Backbone.Model.prototype.constructor.apply( this, arguments )\n\n      // Make sure defaults are not overwritten by setters. Feels like a hack, plx fix.\n      _.extend(this.attributes, this.defaults )\n    }\n  })","ctx":{"type":"declaration","name":"Model","value":"Backbone.Model.extend({","string":"Model"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"augments","otherClass":"Backbone.Model.prototype.get"}],"description":{"full":"Get a value on the object. Applies getter if there is one.\n    @public\n    @type Function\n    @augments Backbone.Model.prototype.get","summary":"Get a value on the object. Applies getter if there is one.\n    @public\n    @type Function\n    @augments Backbone.Model.prototype.get","body":""},"isPrivate":false,"ignore":false,"code":"Model.prototype.get = function( attr ) {\n    var value, getter\n\n    value = this.attributes[ attr ]\n    getter = this[ 'get:' + attr ] || 0\n\n    if( getter ) {\n      return getter.call( this, value )\n    }\n\n    return value\n  }","ctx":{"type":"method","constructor":"Model","name":"get","string":"Model.prototype.get()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"augments","otherClass":"Backbone.Model.prototype.set"}],"description":{"full":"Get a value on the object. Applies setter if there is one.\n    @public\n    @type Function\n    @augments Backbone.Model.prototype.set","summary":"Get a value on the object. Applies setter if there is one.\n    @public\n    @type Function\n    @augments Backbone.Model.prototype.set","body":""},"isPrivate":false,"ignore":false,"code":"Model.prototype.set = function( key, value, options ) {\n    var attrs, attr, setter\n\n    if( _.isObject(key) ) {\n      attrs = key\n      options = value\n    } else {\n      attrs = {}\n      attrs[ key ] = value\n    }\n\n    for( attr in attrs ) {\n      setter = this[ 'set:' + attr ] || 0\n      if( setter ) {\n        attrs[ attr ] = setter.call( this, attrs[attr] )\n      }\n    }\n    \n    Backbone.Model.prototype.set.call( this, attrs, options )\n  }\n\n  return Model\n})","ctx":{"type":"method","constructor":"Model","name":"set","string":"Model.prototype.set()"}}]},{"name":"View.js","dox":[{"tags":[{"type":"class","string":"The base view"},{"type":"extends","string":"Backbone.View"},{"type":"requires","string":"[underscore, cerebral/lib/Backbone, cerebral/mvc/ViewCollection]"},{"type":"exports","string":"View"}],"description":{"full":"@class The base view\n  @extends Backbone.View\n  @requires [underscore, cerebral/lib/Backbone, cerebral/mvc/ViewCollection]\n  @exports View","summary":"@class The base view\n  @extends Backbone.View\n  @requires [underscore, cerebral/lib/Backbone, cerebral/mvc/ViewCollection]\n  @exports View","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/mvc/View\", [\n  \"underscore\",\n  \"cerebral/lib/Backbone\",\n  \"cerebral/mvc/ViewCollection\"\n], \nfunction( _,Backbone, ViewCollection ) {"},{"tags":[{"type":"public","string":""},{"type":"constructor","string":""},{"type":"property","string":"{cerebral/mvc/ViewCollection} subviews"}],"description":{"full":"Creates a new View\n    @public\n    @constructor\n    @property {cerebral/mvc/ViewCollection} subviews","summary":"Creates a new View\n    @public\n    @constructor\n    @property {cerebral/mvc/ViewCollection} subviews","body":""},"isPrivate":false,"ignore":false,"code":"var View = Backbone.View.extend({\n    constructor: function() {\n      Backbone.View.prototype.constructor.apply( this, arguments )\n      this.subviews = new ViewCollection()\n    }\n  })","ctx":{"type":"declaration","name":"View","value":"Backbone.View.extend({","string":"View"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"event","string":"#setelement [view]"},{"type":"augments","otherClass":"Backbone.View.prototype.setElement"}],"description":{"full":"Ref Backbone.View.prototype.setElement, augments to fire a #setelement event\n    @public\n    @type Function\n    @event #setelement [view]\n    @augments Backbone.View.prototype.setElement","summary":"Ref Backbone.View.prototype.setElement, augments to fire a #setelement event\n    @public\n    @type Function\n    @event #setelement [view]\n    @augments Backbone.View.prototype.setElement","body":""},"isPrivate":false,"ignore":false,"code":"View.prototype.setElement = function() {\n    Backbone.View.prototype.setElement.apply( this, arguments )\n    this.trigger( \"setelement\", this )\n    \n    return this\n  }","ctx":{"type":"method","constructor":"View","name":"setElement","string":"View.prototype.setElement()"}},{"tags":[{"type":"public","string":""},{"type":"event","string":"#dispose [view]"},{"type":"type","types":["Function"]}],"description":{"full":"Unbinds all listeners, all DOM event listeners, removes the view.$el from the DOM and triggers \"dispose\"\n    @public\n    @event #dispose [view]\n    @type Function","summary":"Unbinds all listeners, all DOM event listeners, removes the view.$el from the DOM and triggers \"dispose\"\n    @public\n    @event #dispose [view]\n    @type Function","body":""},"isPrivate":false,"ignore":false,"code":"View.prototype.dispose = function() {\n    this.trigger('dispose', this)\n    this.subviews.invoke( 'dispose' )\n    this.unbindAll()\n    this.unbind()\n    this.remove()\n\n    return this\n  }\n  \n  return View\n})","ctx":{"type":"method","constructor":"View","name":"dispose","string":"View.prototype.dispose()"}}]},{"name":"ViewCollection.js","dox":[{"tags":[{"type":"class","string":"for managing subviews for a view"},{"type":"extends","string":"Backbone.Events"},{"type":"requires","string":"[underscore, cerebral/lib/Backbone]"},{"type":"exports","string":"ViewCollection"}],"description":{"full":"@class for managing subviews for a view\n  @extends Backbone.Events\n  @requires [underscore, cerebral/lib/Backbone]\n  @exports ViewCollection","summary":"@class for managing subviews for a view\n  @extends Backbone.Events\n  @requires [underscore, cerebral/lib/Backbone]\n  @exports ViewCollection","body":""},"isPrivate":false,"ignore":false,"code":"define(\n\"cerebral/mvc/ViewCollection\",[\n  \"underscore\",\n  \"cerebral/lib/Backbone\"\n], \nfunction( _, Backbone ) {"},{"tags":[{"type":"public","string":""},{"type":"constructor","string":""},{"type":"property","string":"{Array} views Internal array of all the views attached"},{"type":"property","string":"{Number} length The number of attached subviews"}],"description":{"full":"Creates a new ViewCollection\n    @public\n    @constructor\n    @property {Array} views Internal array of all the views attached\n    @property {Number} length The number of attached subviews","summary":"Creates a new ViewCollection\n    @public\n    @constructor\n    @property {Array} views Internal array of all the views attached\n    @property {Number} length The number of attached subviews","body":""},"isPrivate":false,"ignore":false,"code":"function ViewCollection( options ) {\n    this.views = {}\n    this.length = 0\n  }\n\n  _.extend( ViewCollection.prototype, Backbone.Events )","ctx":{"type":"function","name":"ViewCollection","string":"ViewCollection()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"borrows","otherMemberName":"underscore[methodname]","thisMemberName":"this[methodname]"}],"description":{"full":"Implement underscore collection methods on ViewCollection.prototype, using subviews as list parameter\n    and the rest(splat) as arguments to the method call.\n    @public\n    @type Function\n    @borrows underscore[methodname] as this[methodname]","summary":"Implement underscore collection methods on ViewCollection.prototype, using subviews as list parameter\n    and the rest(splat) as arguments to the method call.\n    @public\n    @type Function\n    @borrows underscore[methodname] as this[methodname]","body":""},"isPrivate":false,"ignore":false,"code":"_.each([\n    \"each\",\"map\",\"reduce\",\"reduceRight\",\"find\",\n    \"filter\",\"reject\",\"all\",\"any\",\"include\",\n    \"invoke\",\"pluck\",\"max\",\"min\",\"sortBy\",\n    \"groupBy\",\"sortedIndex\",\"shuffle\",\"toArray\",\"size\"\n  ], function( methodName ) {\n\n    ViewCollection.prototype[ methodName ] = function() {\n      var args\n\n      args = [ this.views ].concat( [].slice.call(arguments, 0) )\n      return _[ methodName ].apply( this, args )\n    }\n\n  })"},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"event","string":"#attach [name, view]"},{"type":"param","types":["String"],"name":"name","description":"The name of the view"},{"type":"param","types":["Backbone.View","cerebral","mvc","View"],"name":"name","description":"The view to attach"}],"description":{"full":"@private\n    @type Function\n    @event #attach [name, view]\n    @param {String} name The name of the view\n    @param {Backbone.View|cerebral/mvc/View} name The view to attach","summary":"@private\n    @type Function\n    @event #attach [name, view]\n    @param {String} name The name of the view\n    @param {Backbone.View|cerebral/mvc/View} name The view to attach","body":""},"isPrivate":false,"ignore":false,"code":"function attach( name, subview ) {\n    if( typeof name !== 'string' )\n      throw new TypeError( 'parameter name not of type \"string\"' )\n    if( !(subview instanceof Backbone.View) )\n      throw new TypeError( 'subview parameter not instance of Backbone.View' )\n    if( this.views[name] )\n      throw new Error( 'subview with that name allready attached' )\n\n    this.views[ name ] = subview\n    subview.on( \"dispose\", this.subviewOnDispose, this )\n    this.trigger( 'attach', name, subview )\n\n    this.length++\n  }","ctx":{"type":"function","name":"attach","string":"attach()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Backbone.View","cerebral","mvc","View[]"],"name":"array","description":"Array of views"}],"description":{"full":"Attach a array of views\n    @private\n    @type Function\n    @param {Backbone.View|cerebral/mvc/View[]} array Array of views","summary":"Attach a array of views\n    @private\n    @type Function\n    @param {Backbone.View|cerebral/mvc/View[]} array Array of views","body":""},"isPrivate":false,"ignore":false,"code":"function attachArray( array ) {\n    _.each(array, function( subview ) {\n      attach.call( this, subview.cid, subview )\n    }, this)\n  }","ctx":{"type":"function","name":"attachArray","string":"attachArray()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Object"],"name":"obj","description":"Keys ar handles as names for the values wich must be Backbone.View or cerebral view"}],"description":{"full":"Attach a object of views, keys are names and values are the views\n    @private\n    @type Function\n    @param {Object} obj Keys ar handles as names for the values wich must be Backbone.View or cerebral view","summary":"Attach a object of views, keys are names and values are the views\n    @private\n    @type Function\n    @param {Object} obj Keys ar handles as names for the values wich must be Backbone.View or cerebral view","body":""},"isPrivate":false,"ignore":false,"code":"function attachObject( obj ) {\n    _.each(obj, function( subview, name ) {\n      attach.call( this, name, subview )\n    }, this)\n  }","ctx":{"type":"function","name":"attachObject","string":"attachObject()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Array","Object"],"name":"subview","description":"The subview[s] to attach"}],"description":{"full":"Attach view[s] to the collection, delegates to private functions depending on parameter type\n    @public\n    @type Function\n    @param {Array|Object} subview The subview[s] to attach","summary":"Attach view[s] to the collection, delegates to private functions depending on parameter type\n    @public\n    @type Function\n    @param {Array|Object} subview The subview[s] to attach","body":""},"isPrivate":false,"ignore":false,"code":"ViewCollection.prototype.attach = function( subviews ) {\n    if( _.isArray(subviews) )\n      return attachArray.call( this, subviews )\n    if( typeof subviews === 'object' )\n      return attachObject.call( this, subviews )\n\n    throw new TypeError( 'parameter subviews not of correct type. Accepted: object{name: subview}, subviews, array of subviews' )\n  }","ctx":{"type":"method","constructor":"ViewCollection","name":"attach","string":"ViewCollection.prototype.attach()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["Backbone.View","cerebral","mvc","View"],"name":"instance","description":"The view to detach"}],"description":{"full":"Detach a view by reference to the view itself\n    @private\n    @type Function\n    @param {Backbone.View|cerebral/mvc/View} instance The view to detach","summary":"Detach a view by reference to the view itself\n    @private\n    @type Function\n    @param {Backbone.View|cerebral/mvc/View} instance The view to detach","body":""},"isPrivate":false,"ignore":false,"code":"function detachByInstance( instance ) {\n    var key, view\n\n    for( key in this.views ) {\n      view = this.views[ key ]\n\n      if( view === instance ) {\n        delete this.views[ key ]\n        return {\n          name: key,\n          instance: view\n        }   \n      }\n    }\n  }","ctx":{"type":"function","name":"detachByInstance","string":"detachByInstance()"}},{"tags":[{"type":"private","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["string"],"name":"name","description":"The name or cid of the view"}],"description":{"full":"Detach a view by its name or cid\n    @private\n    @type Function\n    @param {string} name The name or cid of the view","summary":"Detach a view by its name or cid\n    @private\n    @type Function\n    @param {string} name The name or cid of the view","body":""},"isPrivate":false,"ignore":false,"code":"function detachByName( name ) {\n    var view\n\n    if( this.views[name] ) {\n      view = this.views[ name ]\n\n      delete this.views[ name ]\n      return {\n        name: name,\n        instance: view\n      }\n    }\n  }","ctx":{"type":"function","name":"detachByName","string":"detachByName()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"event","string":"#detach [name, view]"},{"type":"param","types":["Backbone.View","cerebral","mvc","View"],"name":"nameOrView","description":"The name or view instance to detach"},{"type":"param","types":["options"],"name":"options","description":"for the detachment"},{"type":"param","types":["options.dispose"],"name":"Should","description":"the view allso call dispose on itself"}],"description":{"full":"Detach view[s] from the collection, delegates to private functions depending on parameter type\n    @public\n    @type Function\n    @event #detach [name, view]\n    @param {Backbone.View|cerebral/mvc/View} nameOrView The name or view instance to detach\n    @param options options for the detachment\n    @param options.dispose Should the view allso call dispose on itself","summary":"Detach view[s] from the collection, delegates to private functions depending on parameter type\n    @public\n    @type Function\n    @event #detach [name, view]\n    @param {Backbone.View|cerebral/mvc/View} nameOrView The name or view instance to detach\n    @param options options for the detachment\n    @param options.dispose Should the view allso call dispose on itself","body":""},"isPrivate":false,"ignore":false,"code":"ViewCollection.prototype.detach = function( nameOrView, opts ) {\n    var options, detachedView\n\n    if( typeof nameOrView === 'string' ) {\n      detachedView = detachByName.call( this, nameOrView )\n    }\n    if( typeof nameOrView === 'object' ) {\n      detachedView = detachByInstance.call( this, nameOrView )\n    }\n\n    if( detachedView ) {\n      options = _.extend({\n        dispose: true\n      }, opts)\n      this.length--\n      if( detachedView.instance.subviews && detachedView.instance.subviews.length > 0 )\n        detachedView.instance.subviews.detachAll( options )\n      if( options.dispose )\n        detachedView.instance.dispose()\n      if( !options.silent )\n        this.trigger( 'detach', detachedView.name, detachedView.instance )\n    }\n  }","ctx":{"type":"method","constructor":"ViewCollection","name":"detach","string":"ViewCollection.prototype.detach()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["options"],"name":"options","description":"for the detachment, ref ViewCollection.prototype.detach"}],"description":{"full":"Detach all view[s] from the collection\n    @public\n    @type Function\n    @param options options for the detachment, ref ViewCollection.prototype.detach","summary":"Detach all view[s] from the collection\n    @public\n    @type Function\n    @param options options for the detachment, ref ViewCollection.prototype.detach","body":""},"isPrivate":false,"ignore":false,"code":"ViewCollection.prototype.detachAll = function( options ) {\n    this.each(function( view, name ) {\n      this.detach( name, options )\n    }, this)\n  }","ctx":{"type":"method","constructor":"ViewCollection","name":"detachAll","string":"ViewCollection.prototype.detachAll()"}},{"tags":[{"type":"public","string":""},{"type":"event","string":""},{"type":"param","types":["Backbone.View","cerebral","mvc","View"],"name":"view","description":"The view that called dispose"}],"description":{"full":"Event handler for view#dispose\n    @public\n    @event\n    @param {Backbone.View|cerebral/mvc/View} view The view that called dispose","summary":"Event handler for view#dispose\n    @public\n    @event\n    @param {Backbone.View|cerebral/mvc/View} view The view that called dispose","body":""},"isPrivate":false,"ignore":false,"code":"ViewCollection.prototype.subviewOnDispose = function( view ) {\n    this.detach( view, {dispose: false} )\n  }","ctx":{"type":"method","constructor":"ViewCollection","name":"subviewOnDispose","string":"ViewCollection.prototype.subviewOnDispose()"}},{"tags":[{"type":"public","string":""},{"type":"param","types":["String"],"name":"key","description":"The name given when attach was called or the cid of the view"},{"type":"return","types":["Backbone.View","cerebral","mvc","View"],"description":""}],"description":{"full":"Get a view stored on a given key\n    @public\n    @param {String} key The name given when attach was called or the cid of the view\n    @return {Backbone.View|cerebral/mvc/View}","summary":"Get a view stored on a given key\n    @public\n    @param {String} key The name given when attach was called or the cid of the view\n    @return {Backbone.View|cerebral/mvc/View}","body":""},"isPrivate":false,"ignore":false,"code":"ViewCollection.prototype.get = function( key ) {\n    return this.views[ key ]\n  }","ctx":{"type":"method","constructor":"ViewCollection","name":"get","string":"ViewCollection.prototype.get()"}},{"tags":[{"type":"public","string":""},{"type":"type","types":["Function"]},{"type":"param","types":["String"],"name":"selector","description":"Selector for the dom node"},{"type":"returns","string":"{cerebral/mvc/ViewCollection[]}"}],"description":{"full":"Find views where the selecor parameter is found within the views $el\n    @public\n    @type Function\n    @param {String} selector Selector for the dom node\n    @returns {cerebral/mvc/ViewCollection[]}","summary":"Find views where the selecor parameter is found within the views $el\n    @public\n    @type Function\n    @param {String} selector Selector for the dom node\n    @returns {cerebral/mvc/ViewCollection[]}","body":""},"isPrivate":false,"ignore":false,"code":"ViewCollection.prototype.querySelector = function( selector ) {\n    var matchingViews\n\n    matchingViews = []\n\n    this.each(function( view ) {\n      var matchedElements\n      matchedElements = view.$el.find( selector )\n      if( matchedElements && matchedElements.length ) {\n        matchingViews.push( view )\n      }\n    }, this)\n    \n    return matchingViews\n  }\n\n  return ViewCollection\n})","ctx":{"type":"method","constructor":"ViewCollection","name":"querySelector","string":"ViewCollection.prototype.querySelector()"}}]}]}}}
